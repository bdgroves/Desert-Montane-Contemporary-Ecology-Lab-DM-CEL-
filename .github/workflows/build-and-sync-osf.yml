      - name: Install Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Generate processed data
        run: Rscript scripts/make_processed_sample2.R
        
       - name: Generate processed data (sample3)
        run: Rscript scripts/make_processed_sample3.R


      # NEW: prove the OSF token works in CI and list components
      - name: DEBUG - OSF smoke test (auth + list nodes)
        env:
          OSF_TOKEN: ${{ secrets.OSF_TOKEN }}
          OSF_PROJECT: ${{ secrets.OSF_PROJECT }}
        run: |
          Rscript -e "install.packages('osfr', repos='https://cran.rstudio.com')"
          Rscript -e "library(osfr); osf_auth(token = Sys.getenv('OSF_TOKEN')); \
                      proj <- osf_retrieve_node(Sys.getenv('OSF_PROJECT')); \
                      print(osf_ls_nodes(proj))"

      - name: Render Quarto report(s)
        run: quarto render reports/quarto/dmcel_overview.qmd

      - name: DEBUG - list candidate upload files
        run: |
          echo "=== reports (html/pdf/qmd/md) ==="
          ls -R reports || true
          echo "=== outputs/figures ==="
          ls -R outputs/figures || true
          echo "=== outputs/maps ==="
          ls -R outputs/maps || true
          echo "=== data/processed ==="
          ls -R data/processed || true

      # NEW: fail fast if token looks wrong
      - name: DEBUG - show non-sensitive OSF config
        run: |
          echo "OSF_PROJECT=${{ secrets.OSF_PROJECT }}"
          echo "OSF_DATA_COMPONENT=${{ secrets.OSF_DATA_COMPONENT }}"
          echo "OSF_REPORTS_COMPONENT=${{ secrets.OSF_REPORTS_COMPONENT }}"
          echo "TOKEN_LEN=$(python - << 'PY'
          import os; t=os.getenv('OSF_TOKEN',''); print(len(t))
          PY
          )"
          if [ "$TOKEN_LEN" -lt 30 ]; then
            echo "::error ::OSF_TOKEN appears too short ($TOKEN_LEN chars). Check repo Secrets."
            exit 1
          fi

      - name: Upload rendered reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: dmcel-reports
          path: |
            reports/**/*.html
            outputs/figures/**
            outputs/maps/**

      - name: OSF Sync
        env:
          OSF_TOKEN: ${{ secrets.OSF_TOKEN }}
          OSF_PROJECT: ${{ secrets.OSF_PROJECT }}
          OSF_DATA_COMPONENT: ${{ secrets.OSF_DATA_COMPONENT }}
          OSF_REPORTS_COMPONENT: ${{ secrets.OSF_REPORTS_COMPONENT }}
        run: Rscript scripts/osf_sync.R
